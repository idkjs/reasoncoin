// Generated by BUCKLESCRIPT VERSION 1.9.0, PLEASE EDIT WITH CARE
'use strict';

var List       = require("bs-platform/lib/js/list.js");
var JsSha256   = require("js-sha256");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function range(a, b) {
  if (a > b) {
    return /* [] */0;
  } else {
    return /* :: */[
            a,
            range(a + 1 | 0, b)
          ];
  }
}

function blockBuilder(index, timestamp, data, previous_hash, hash) {
  return /* record */[
          /* index */index,
          /* timestamp */"now",
          /* data */"Hey! I'm block " + Pervasives.string_of_int(index),
          /* previous_hash */previous_hash,
          /* hash */JsSha256.sha256(Pervasives.string_of_int(index) + (timestamp + (data + (hash + previous_hash))))
        ];
}

function create_genesis_block() {
  return blockBuilder(0, "1234", "Genesis Block", "0", "0");
}

function next_block(last_block) {
  var newIndex = last_block[/* index */0] + 1 | 0;
  var data = "Hey! I'm block " + Pervasives.string_of_int(newIndex);
  return blockBuilder(newIndex, "now", data, last_block[/* hash */4], last_block[/* hash */4]);
}

var genesisBlock = create_genesis_block(/* () */0);

var blocksToAdd = range(0, 20);

var snakeBlockChain = List.fold_left((function (blockchain, _) {
        var firstBlock = List.nth(blockchain, 0);
        var newBlock = next_block(firstBlock);
        return /* :: */[
                newBlock,
                blockchain
              ];
      }), /* :: */[
      genesisBlock,
      /* [] */0
    ], blocksToAdd);

List.iter((function (block) {
        console.log(block);
        return /* () */0;
      }), snakeBlockChain);

exports.range                = range;
exports.blockBuilder         = blockBuilder;
exports.create_genesis_block = create_genesis_block;
exports.next_block           = next_block;
exports.genesisBlock         = genesisBlock;
exports.blocksToAdd          = blocksToAdd;
exports.snakeBlockChain      = snakeBlockChain;
/* genesisBlock Not a pure module */
